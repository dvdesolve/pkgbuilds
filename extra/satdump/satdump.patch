--- plugins/inmarsat_support/aero/libacars/list.c	2024-11-29 07:58:19.000000000 -0500
+++ plugins/inmarsat_support/aero/libacars/list.c	2025-05-18 11:52:09.870677811 -0400
@@ -36,14 +36,14 @@ size_t la_list_length(la_list const *l)
 	return len;
 }
 
-void la_list_foreach(la_list *l, void (*cb)(), void *ctx) {
+void la_list_foreach(la_list *l, void (*cb)(const void* p, void* c), void *ctx) {
 	la_assert(cb != NULL);
 	for(; l != NULL; l = la_list_next(l)) {
 		cb(l->data, ctx);
 	}
 }
 
-void la_list_free_full_with_ctx(la_list *l, void (*node_free)(), void *ctx) {
+void la_list_free_full_with_ctx(la_list *l, void (*node_free)(void* tag, void* c), void *ctx) {
 	if(l == NULL) {
 		return;
 	}
@@ -57,7 +57,7 @@ void la_list_free_full_with_ctx(la_list
 	LA_XFREE(l);
 }
 
-void la_list_free_full(la_list *l, void (*node_free)()) {
+void la_list_free_full(la_list *l, void (*node_free)(void* tag)) {
 	if(l == NULL) {
 		return;
 	}
--- plugins/inmarsat_support/aero/libacars/list.h	2024-11-29 07:58:19.000000000 -0500
+++ plugins/inmarsat_support/aero/libacars/list.h	2025-05-18 11:52:09.871279212 -0400
@@ -22,10 +22,10 @@ struct la_list {
 la_list *la_list_next(la_list const *l);
 la_list *la_list_append(la_list *l, void *data);
 size_t la_list_length(la_list const *l);
-void la_list_foreach(la_list *l, void (*cb)(), void *ctx);
+void la_list_foreach(la_list *l, void (*cb)(const void* p, void* c), void *ctx);
 void la_list_free(la_list *l);
-void la_list_free_full(la_list *l, void (*node_free)());
-void la_list_free_full_with_ctx(la_list *l, void (*node_free)(), void *ctx);
+void la_list_free_full(la_list *l, void (*node_free)(void* tag));
+void la_list_free_full_with_ctx(la_list *l, void (*node_free)(void* tag, void* c), void *ctx);
 
 #ifdef __cplusplus
 }
--- src-core/libs/sol2/sol.hpp	2024-11-29 07:58:19.000000000 -0500
+++ src-core/libs/sol2/sol.hpp	2025-05-18 11:52:09.980519343 -0400
@@ -6747,13 +6747,13 @@ namespace sol {
 		/// one.
 		///
 		/// \group emplace
-		template <class... Args>
+		/* template <class... Args>
 		T& emplace(Args&&... args) noexcept {
 			static_assert(std::is_constructible<T, Args&&...>::value, "T must be constructible with Args");
 
 			*this = nullopt;
 			this->construct(std::forward<Args>(args)...);
-		}
+		} */
 
 		/// Swaps this optional with the other.
 		///
@@ -28904,4 +28904,4 @@ namespace sol {
 #endif // SOL_HPP
 // end of sol/sol.hpp
 
-#endif // SOL_SINGLE_INCLUDE_HPP
\ No newline at end of file
+#endif // SOL_SINGLE_INCLUDE_HPP
